{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DIST_MULTIPLIERS","5","10","15","half","full","DIST_LABELS","toString","secs","date","Date","setSeconds","toISOString","substr","fromString","str","value","replace","length","Error","h","m","s","parseInt","RUNNERS","name","times","PHASES","SimpleTable","columns","data","dataColumns","dataRows","pc","tableHeaders","map","column","width","tableBody","row","className","App","phases","dist","i","label","lastDistance","runnersData","target","diff","Math","round","time","winner","reduce","a","b","nextPhaseRaw","lastTime","fastestTime","p","min","Infinity","nextPhase","handicap","style","textAlign","maxWidth","reverse","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9543b73f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst DIST_MULTIPLIERS = {\n  5: 0.476319876,\n  10: 1,\n  15: 1.65,\n  half: 2.222729,\n  full: 4.666666667,\n};\nconst DIST_LABELS = {\n  5: \"5k\",\n  10: \"10k\",\n  15: \"15k\",\n  half: \"Half Marathon\",\n  full: \"Marathon\",\n};\n\nfunction toString(secs) {\n  const date = new Date(null);\n  date.setSeconds(secs);\n  return date.toISOString().substr(11, 8);\n}\n\nfunction fromString(str) {\n  let value = str.replace(/:/g, \"\");\n  value = value.replace(/_/g, \"\");\n  if (value.length < 6) {\n    throw new Error(\"Invalid date form\");\n  }\n  const h = value.substr(0, 2);\n  const m = value.substr(2, 2);\n  const s = value.substr(4, 2);\n  return parseInt(h * 3600) + parseInt(m * 60) + parseInt(s);\n}\n\nconst RUNNERS = [\n  {\n    name: \"Jules\",\n    times: [\"00:46:06\", \"00:21:20\"],\n  },\n  {\n    name: \"Matt\",\n    times: [\"00:33:41\", \"00:16:14\"],\n  },\n  {\n    name: \"James\",\n    times: [\"00:49:48\", \"00:22:05\"],\n  },\n  {\n    name: \"Tom\",\n    times: [\"00:44:06\", \"00:20:55\"],\n  },\n];\nconst PHASES = [10, 5];\nconst NEXT_PHASE_DIST = 15;\n\nconst SimpleTable = ({ columns, data }) => {\n  const dataColumns = columns;\n  const dataRows = data;\n\n  const pc = 100 / columns.length;\n\n  const tableHeaders = (\n    <thead>\n      <tr>\n        {dataColumns.map(function (column) {\n          return <th width={`${pc}%`}>{column}</th>;\n        })}\n      </tr>\n    </thead>\n  );\n\n  const tableBody = dataRows.map(function (row) {\n    return (\n      <tr>\n        {dataColumns.map(function (column) {\n          return <td width={`${pc}%`}>{row[column]}</td>;\n        })}\n      </tr>\n    );\n  });\n\n  // Decorate with Bootstrap CSS\n  return (\n    <table className=\"table table-bordered table-hover\" width=\"100%\">\n      {tableHeaders}\n      {tableBody}\n    </table>\n  );\n};\n\nfunction App() {\n  const phases = PHASES.map((dist, i) => {\n    const label = DIST_LABELS[dist];\n\n    const lastDistance = PHASES[i - 1];\n    const runnersData = RUNNERS.map(({ name, times }) => {\n      const lastTime = fromString(times[i - 1] || '00:00:00');\n      const target =\n        (lastTime / DIST_MULTIPLIERS[lastDistance]) *\n        DIST_MULTIPLIERS[PHASES[i]];\n      const diff = `${Math.round(fromString(times[i]) - target)}s`;\n\n      return {\n        name,\n        time: times[i],\n        target: lastDistance ? toString(target) : 'NA',\n        diff: lastDistance ? diff : 'NA',\n      };\n    });\n\n    const winner = runnersData.reduce(\n      (a, b) => {\n        if (!a) {\n          return b;\n        }\n        if (!b) {\n          return a;\n        }\n        if (!lastDistance) {\n          if (fromString(a.time) < fromString(b.time)) {\n            return a;\n          }\n          return b;\n        }\n        if (parseInt(a.diff) < parseInt(b.diff)) {\n          return a;\n        }\n        return b;\n      },\n      null\n    );\n\n    return (\n      <div>\n        <h4>\n          {label} \\\\ Winner: {winner.name}\n        </h4>\n        <SimpleTable columns={[\"name\", \"time\", \"diff\"]} data={runnersData} />\n      </div>\n    );\n  });\n\n  const nextPhaseRaw = RUNNERS.map(({ name, times }) => {\n    const lastTime = fromString(times[times.length - 1]);\n    const lastDistance = PHASES[PHASES.length - 1];\n    const target =\n      (lastTime / DIST_MULTIPLIERS[lastDistance]) *\n      DIST_MULTIPLIERS[NEXT_PHASE_DIST];\n\n    return { name, target };\n  });\n\n  const fastestTime = nextPhaseRaw\n    .map((p) => p.target)\n    .reduce((a, b) => Math.min(a, b), Infinity);\n  const nextPhase = nextPhaseRaw.map(({ name, target }) => {\n    const handicap = toString(target - fastestTime);\n    return { name, handicap, target: toString(target) };\n  });\n\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\", maxWidth: \"800px\" }}>\n      <h1>COVID CUP POWER RANKINGS</h1>\n\n      <div className=\"next\">\n        <h3>CURRENT ROUND - {DIST_LABELS[NEXT_PHASE_DIST]} - Ends 15 July</h3>\n        <SimpleTable\n          columns={[\"name\", \"target\", \"handicap\"]}\n          data={nextPhase}\n        />\n      </div>\n\n      <div className=\"past\">\n        <h3>COMPLETED ROUNDS</h3>\n        {phases.reverse()}\n      </div>\n\n      <footer>\n        Methodology and multipliers adapted from{\" \"}\n        <a href=\"https://www.selbystriders.org.uk/handicap-competitions/handicap-points-calculator/\">\n          Selby Striders\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}