{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DIST_MULTIPLIERS","5","8","10","15","half","full","DIST_LABELS","toString","secs","date","Date","setSeconds","toISOString","substr","fromString","str","value","replace","length","Error","h","m","s","parseInt","RUNNERS","name","initials","times","PHASES","SimpleTable","columns","data","tableHeaders","Table","Head","map","column","HeaderCell","toUpperCase","substring","tableRows","row","j","Row","key","i","Cell","border","Body","App","phases","dist","label","lastDistance","runnersData","target","diff","Math","round","Avatar","size","marginRight","time","winner","reduce","a","b","winnerEntry","find","r","CrownIcon","marginLeft","Pane","background","elevation","width","alignItems","padding","Badge","color","marginBottom","nextPhaseRaw","lastTime","fastestTime","p","min","Infinity","nextPhase","handicap","display","borderRadius","maxWidth","margin","flexDirection","Heading","marginTop","StopwatchIcon","reverse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.972d90b6.chunk.js","sourcesContent":["import React from \"react\";\nimport { CrownIcon, StopwatchIcon, Pane, Table, Heading, Avatar, Badge } from 'evergreen-ui'\nimport \"./App.css\";\n\nconst DIST_MULTIPLIERS = {\n  5: 0.476319876,\n  8: 0.78,\n  10: 1,\n  15: 1.65,\n  half: 2.222729,\n  full: 4.666666667,\n};\nconst DIST_LABELS = {\n  5: \"5k\",\n  8: \"8k\",\n  10: \"10k\",\n  15: \"15k\",\n  half: \"Half Marathon\",\n  full: \"Marathon\",\n};\n\nfunction toString(secs) {\n  const date = new Date(null);\n  date.setSeconds(secs);\n  return date.toISOString().substr(11, 8);\n}\n\nfunction fromString(str) {\n  let value = str.replace(/:/g, \"\");\n  value = value.replace(/_/g, \"\");\n  if (value.length < 6) {\n    throw new Error(\"Invalid date form\");\n  }\n  const h = value.substr(0, 2);\n  const m = value.substr(2, 2);\n  const s = value.substr(4, 2);\n  return parseInt(h * 3600) + parseInt(m * 60) + parseInt(s);\n}\n\nconst RUNNERS = [\n  {\n    name: \"Jules\",\n    initials: 'J F',\n    times: [\"00:37:14\"],\n  },\n  {\n    name: \"Tom\",\n    initials: 'T P',\n    times: [\"00:34:44\"],\n  },\n  {\n    name: \"James\",\n    initials: 'J G',\n    times: [\"00:44:06\"],\n  },\n  {\n    name: \"Nathan\",\n    initials: \"N J\",\n    times: [\"00:44:06\"],\n  },\n];\nconst PHASES = [8];\nconst NEXT_PHASE_DIST = 10;\n\nconst toCapCase = (name) => name[0].toUpperCase() + name.substring(1);\n\nconst SimpleTable = ({ columns, data }) => {\n\n  const tableHeaders = (\n    <Table.Head>\n      {columns.map(function (column) {\n        return <Table.HeaderCell>{toCapCase(column)}</Table.HeaderCell>;\n      })}\n    </Table.Head>\n  );\n\n  const tableRows = data.map(function (row, j) {\n    return (\n      <Table.Row key={j}>\n        {columns.map(function (column, i) {\n          return <Table.Cell key={i}>{row[column]}</Table.Cell>;\n        })}\n      </Table.Row>\n    );\n  });\n\n  return (\n    <Table border>\n      {tableHeaders}\n      <Table.Body>\n        {tableRows}\n      </Table.Body>\n    </Table>\n  );\n};\n\nfunction App() {\n  const phases = PHASES.map((dist, i) => {\n    const label = DIST_LABELS[dist];\n\n    const lastDistance = PHASES[i - 1];\n    const runnersData = RUNNERS.map(({ name, times, initials }) => {\n      const lastTime = fromString(times[i - 1] || '00:00:00');\n      const target =\n        (lastTime / DIST_MULTIPLIERS[lastDistance]) *\n        DIST_MULTIPLIERS[PHASES[i]];\n      const diff = `${Math.round(fromString(times[i]) - target)}s`;\n\n      return {\n        name: <div><Avatar name={initials} size={25} marginRight={10} />{name}</div>,\n        initials,\n        time: times[i],\n        target: lastDistance ? toString(target) : '-',\n        diff: lastDistance ? diff : '-',\n      };\n    });\n\n    const winner = runnersData.reduce(\n      (a, b) => {\n        if (!a) {\n          return b;\n        }\n        if (!b) {\n          return a;\n        }\n        if (!lastDistance) {\n          if (fromString(a.time) < fromString(b.time)) {\n            return a;\n          }\n          return b;\n        }\n        if (parseInt(a.diff) < parseInt(b.diff)) {\n          return a;\n        }\n        return b;\n      },\n      null\n    );\n\n    const winnerEntry = runnersData.find(r => r.name === winner.name);\n    winnerEntry.name = <>{winnerEntry.name} <CrownIcon marginLeft={5} size={20} /></>;\n\n    return (\n      <Pane background=\"blueTint\" elevation={1} width={600} alignItems=\"center\" padding={18}>\n        <Badge color=\"neutral\" marginBottom={30}>{label}</Badge>\n        <SimpleTable columns={[\"name\", \"time\", \"diff\"]} data={runnersData} />\n      </Pane>\n    );\n  });\n\n  const nextPhaseRaw = RUNNERS.map(({ name, times }) => {\n    const lastTime = fromString(times[times.length - 1]);\n    const lastDistance = PHASES[PHASES.length - 1];\n    const target =\n      (lastTime / DIST_MULTIPLIERS[lastDistance]) *\n      DIST_MULTIPLIERS[NEXT_PHASE_DIST];\n\n    return { name, target };\n  });\n\n  const fastestTime = nextPhaseRaw\n    .map((p) => p.target)\n    .reduce((a, b) => Math.min(a, b), Infinity);\n  const nextPhase = nextPhaseRaw.map(({ name, target }) => {\n    const handicap = toString(target - fastestTime);\n    return { name, handicap, target: toString(target) };\n  });\n\n  return (\n    <Pane display=\"flex\" padding={16} borderRadius={3} maxWidth={1024} margin=\"auto\" alignItems=\"center\" flexDirection=\"column\">\n      <Heading size={900} marginTop=\"default\">COVID Cup 2021</Heading>\n\n      <Pane elevation={1} marginTop={30} background=\"tint2\" width={600} alignItems=\"left\" padding={18}>\n        <Badge color=\"neutral\" marginRight={30}>{DIST_LABELS[NEXT_PHASE_DIST]}</Badge>\n        <Heading size={300} margin={10}>\n          <StopwatchIcon size={20} marginRight={5}/> March 1 - March 31\n        </Heading>\n        <SimpleTable\n          columns={[\"name\", \"target\", \"handicap\"]}\n          data={nextPhase}\n        />\n      </Pane>\n\n      <Heading size={700} margin={30}>Completed</Heading>\n      <Pane alignItems=\"center\">\n        {phases.reverse()}\n      </Pane>\n    </Pane>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}